---
title: "Titre de votre page d'exploration"
title-block-banner: false
description: | 
  Petite description de cette page.
# à changer
date: "2022-12-21"
# Modifier les détails que vous voulez
author:
  - name: "Amélie Levasseur-Raymond"
    # Votre site web perso ou github
    url: https://amelie-lr.github.io/
    # les champs d'affiliation sont optionnels, vous pouvez les
    # comment out en ajoutant un # devant.
    affiliation: FAS1002
    affiliation-url: https://FAS1002.github.io/A22
    # changer pour votre propre orcid id
    # https://orcid.org/ pour vous inscrire.
    # orcid: 0000-0000-0000-0000

# TRUE == Générer une citation pour cette page précise. Pour enlever, mettre false.
citation: true
# Inclure les références que vous utilisez dans vos rapports. Je conseille Zotero pour construire
# ce fichier ou de connecter RStudio directement pour pouvoir citer avec @nom-de-reference.
bibliography: references.bib
format: 
    html: 
        df-print: paged
---

## Un peu d'interactivité pour le plaisir!

```{r map}
library(leaflet)
leaflet() %>%
    setView(lng=150,
            lat=-30,
            zoom = 3) %>%
    addTiles() %>%
    addMarkers(lng=174.768,
               lat=-36.852,
               popup="Là où R est né") %>%
    addProviderTiles(providers$Esri.WorldGrayCanvas)
```

## Peut-être que ça vous inspirera!

```{r plotly, message=FALSE, warning=FALSE}
library(plotly)
library(gapminder)
df <- gapminder

fig <- df %>%
  plot_ly(
    x = ~ gdpPercap,
    y = ~ lifeExp,
    size = ~ pop,
    color = ~ continent,
    frame = ~ year,
    text = ~ country,
    hoverinfo = "text",
    type = 'scatter',
    mode = 'markers',
    width = "100%",
    height = 600
  )

fig <- fig %>% layout(xaxis = list(type = "log"))

fig <- fig %>%
  animation_button(
    x = 0, xanchor = "left", y = -0.15, yanchor = "bottom"
  )
fig
```

------------------------------------------------------------------------

À votre imagination de jouer!



```{r echo=FALSE, warning=FALSE, message=FALSE}
library(fs)
library(lubridate)
library(tidyverse)
library(skimr)
library(knitr)
```

## Réimportation des données

```{r}
# créer fonction pour importation des données

data_energy_cons_clean <- as_tibble(read.csv(file = "data/processed/owid-energy-consumption-data.csv"))

data_life_clean <- as_tibble(read.csv(file = "data/processed/gm-life-expectancy-data.csv"))

# skim(data)

```

## Données extrèmes

```{r}
# p1 <- ggplot(data = data,
#              mapping = aes(x = Age))
# 
# p1 + geom_histogram()
# 
# p1 + geom_histogram(color = "black",
#                     fill = "#facade",
#                     binwidth = 2)
# 
# data %>% 
#     filter(Age > 78) %>%
#     select(Name, Sex, Age, Team, Games, Sport)
```

## Age vs sexe

```{r}
# p2 <- ggplot(data = data,
#              mapping = aes(x = Sex, y = Age))
# 
# p2 + geom_boxplot()
```

## Évolution du ratio H:F

```{r}
#evolution <- data %>% 
#    group_by(Year, Sex) %>%
#    summarise(nombre = n()) %>%
#    mutate(pourcentage = nombre / sum(n) * 100)

```

```{r}
#evolution_f <- evolution %>% filter(Sex == "F")
#evolution_h <- evolution %>% filter(Sex == "M")

#p3 <- ggplot(evolution_f, aes(x = Year, y = pourcent)) + 
#    geom_line() + 
#    geom_point()

#p4 <- ggplot(evolution_h, aes(x = Year, y = pourcent)) + 
#    geom_line() + 
#    geom_point()

```

## Life Expectancy at Birth

#### Tâche : calculer le temps écoulé **en jours** entre la première année que des données ont été récoltées pour chacun des pays et la production de ce rapport

Identifions d'abord la première année pour chaque pays.

```{r}

# source : https://stackoverflow.com/questions/60460203/finding-year-of-first-occurrence-in-r
life_country <- data_life_clean %>%
    # ne conserver que les variables utiles à la tâche
    select(country, year) %>%
    # grouper les observation par pays et ordonner selon l'année
    group_by(country) %>%
    arrange(country, year) %>%
    # ne conserver que la première année pour chaque pays
    slice_min(order_by = year, n = 1)

first_year <- unique(life_country$year)

```

Nous nous retrouvons donc avec les années suivantes : `r first_year`

Puisque nous n'avons pas la date exacte dans le jeu de données, mais seulement l'année, nous établirons cette date au 1er juillet, soit au milieu de l'année, pour calculer le nombre de jours écoulés.

```{r}

# préciser une date exacte
first_year <- as.Date(paste0(first_year, "-07-01"))

# calculer le nombre de jours écoulés
# source code : https://bookdown.org/Tazinho/Tidyverse-Cookbook/dates-and-times.html
# source timezone : https://rdrr.io/r/base/timezones.html
days_passed <- difftime(lubridate::ymd(first_year, tz = Sys.timezone()), 
                        lubridate::ymd(today(), tz = Sys.timezone()), 
                        units = "days") %>%
    as.double() %>%
    round() %>%
    abs()

countries_1800 <- paste(life_country$country[life_country$year == "1800"], collapse = ", ")
countries_1950 <- paste(life_country$country[life_country$year == "1950"], collapse = ", ")


tibble(c(countries_1800, countries_1950), lubridate::year(first_year), days_passed) %>%
    rename(first_year = `lubridate::year(first_year)`,
           countries = `c(countries_1800, countries_1950)`) %>%
    kable()

```




